"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["9982"],{82109:function(e,i,s){s.r(i),s.d(i,{frontMatter:()=>l,default:()=>h,toc:()=>c,metadata:()=>n,assets:()=>d,contentTitle:()=>r});var n=JSON.parse('{"id":"configuration/sources/mopidy","title":"Mopidy","description":"Mopidy is a headless music server that supports playing music from many standard and non-standard sources such as Pandora, Bandcamp, and Tunein.","source":"@site/docs/configuration/sources/mopidy.mdx","sourceDirName":"configuration/sources","slug":"/configuration/sources/mopidy","permalink":"/multi-scrobbler/configuration/sources/mopidy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration/sources/mopidy.mdx","tags":[],"version":"current","frontMatter":{"title":"Mopidy","toc_min_heading_level":2,"toc_max_heading_level":5},"sidebar":"tutorialSidebar","previous":{"title":"Maloja","permalink":"/multi-scrobbler/configuration/sources/maloja"},"next":{"title":"MPD (Music Player Daemon)","permalink":"/multi-scrobbler/configuration/sources/mpd"}}'),o=s(85893),t=s(50065);s(703),s(73752),s(75752);let l={title:"Mopidy",toc_min_heading_level:2,toc_max_heading_level:5},r=void 0,d={},c=[{value:"URL",id:"url",level:4},{value:"URI Blacklist/Whitelist",id:"uri-blacklistwhitelist",level:3},{value:"Album Blacklist",id:"album-blacklist",level:3},{value:"Configuration",id:"configuration",level:2}];function a(e){let i={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.a)(),...e.components},{Config:s,Details:n}=i;return s||u("Config",!0),n||u("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i.p,{children:["Mopidy is a headless music server that supports playing music from many ",(0,o.jsx)(i.a,{href:"https://mopidy.com/ext/",children:"standard and non-standard sources such as Pandora, Bandcamp, and Tunein."})]}),"\n",(0,o.jsx)(i.p,{children:"multi-scrobbler can scrobble tracks played from any Mopidy backend source, regardless of where you listen to them."}),"\n",(0,o.jsx)(i.admonition,{type:"note",children:(0,o.jsxs)(i.p,{children:["You must have ",(0,o.jsx)(i.a,{href:"https://mopidy.com/ext/http",children:"Mopidy-HTTP extension"})," enabled for this integration to work."]})}),"\n",(0,o.jsx)(i.h4,{id:"url",children:"URL"}),"\n",(0,o.jsxs)(i.p,{children:["The URL used to connect to the Mopidy server, set in your ",(0,o.jsxs)(i.a,{href:"#configuration",children:["file config as ",(0,o.jsx)(i.code,{children:"url"}),"."]})," The URL used to connect ultimately must be formed like this:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"Syntax  => [protocol]://[hostname]:[port]/[path]\nDefault =>         ws://localhost:6680/mopidy/ws\n"})}),"\n",(0,o.jsxs)(i.p,{children:["If any part of this URL is missing multi-scrobbler will use a default value. This also means that if any part of your URL is ",(0,o.jsx)(i.strong,{children:"not"})," standard you must explicitly define it."]}),"\n",(0,o.jsxs)(i.admonition,{title:"Mopidy Configuration",type:"tip",children:[(0,o.jsxs)(i.p,{children:["Make sure the hostname and port number match what is found in the Mopidy configuration file ",(0,o.jsx)(i.code,{children:"mopidy.conf"}),":"]}),(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-ini",children:"[http]\nhostname = localhost\nport = 6680\n"})})]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"URL Transform Examples"}),(0,o.jsxs)(i.p,{children:["Examples of a given ",(0,o.jsx)(i.code,{children:"url"})," in your file config and the final URL multi-scrobbler will use to connect to Mopidy:"]}),(0,o.jsxs)(i.table,{children:[(0,o.jsx)(i.thead,{children:(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.th,{children:(0,o.jsx)(i.code,{children:"url"})}),(0,o.jsx)(i.th,{children:"Transformed URL"})]})}),(0,o.jsxs)(i.tbody,{children:[(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:"(none set)"}),(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"ws://localhost:6680/mopidy/ws"})})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"mopidy.mydomain.com"})}),(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"ws://mopidy.mydomain.com:6680/mopidy/ws/"})})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"192.168.0.101:3456"})}),(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"ws://192.168.0.101:3456/mopidy/ws/"})})]}),(0,o.jsxs)(i.tr,{children:[(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"mopidy.mydomain.com:80/MOPWS"})}),(0,o.jsx)(i.td,{children:(0,o.jsx)(i.code,{children:"ws://mopidy.mydomain.com:80/MOPWS"})})]})]})]})]}),"\n",(0,o.jsx)(i.h3,{id:"uri-blacklistwhitelist",children:"URI Blacklist/Whitelist"}),"\n",(0,o.jsxs)(i.p,{children:["If you wish to disallow or only allow scrobbling from some sources played through Mopidy you can specify these using ",(0,o.jsx)(i.code,{children:"uriBlacklist"})," or ",(0,o.jsx)(i.code,{children:"uriWhitelist"})," in your config. multi-scrobbler will check the list to see if any string matches the START of the ",(0,o.jsx)(i.code,{children:"uri"})," on a track. If whitelist is used then blacklist is ignored. All strings are case-insensitive."]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Example"}),(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-json",children:'{\n    "uriBlacklist": ["soundcloud"]\n}\n'})}),(0,o.jsxs)(i.p,{children:["Will prevent multi-scrobbler from scrobbling any Mopidy track that start with a ",(0,o.jsx)(i.code,{children:"uri"})," like ",(0,o.jsx)(i.code,{children:"soundcloud:song:MySong-1234"})]})]}),"\n",(0,o.jsx)(i.h3,{id:"album-blacklist",children:"Album Blacklist"}),"\n",(0,o.jsx)(i.p,{children:'For certain sources (Soundcloud) Mopidy does not have all track info (Album) and will instead use "Soundcloud" as the Album name. You can prevent multi-scrobbler from using this bad Album data by adding the fake Album name to this list. Multi-scrobbler will still scrobble the track, just without the bad data. All strings are case-insensitive.'}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Example"}),(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-json",children:'{\n    "albumBlacklist": ["SoundCloud", "Mixcloud"]\n}\n'})}),(0,o.jsx)(i.p,{children:"If a track would be scrobbled like"}),(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"Album: Soundcloud, Track: My Cool Track, Artist: A Cool Artist\n"})}),(0,o.jsx)(i.p,{children:"then multi-scrobbler will instead scrobble"}),(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"Track: My Cool Track, Artist: A Cool Artist\n"})})]}),"\n",(0,o.jsx)(i.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(s,{config:"MopidySourceConfig",fileContent:'[\n  {\n    "name": "MyMopidy",\n    "enable": true,\n    "data": {\n      "url": "localhost",\n      "uriBlacklist": [],\n      "uriWhitelist": [],\n      "albumBlacklist": []\n    }\n  }\n]\n',name:"mopidy",children:(0,o.jsx)(i.p,{children:"No ENV support"})})]})}function h(e={}){let{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}function u(e,i){throw Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["167"],{95876:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>t,default:()=>h,toc:()=>c,metadata:()=>i,assets:()=>a,contentTitle:()=>o});var i=JSON.parse('{"id":"configuration/transforms","title":"Scrobble Modification","description":"Multi-scrobbler configs support the ability to modify scrobble data in an automated fashion by matching and replacing strings in title, artists, and album at many different times in multi-scrobbler\'s lifecycle.","source":"@site/docs/configuration/transforms.mdx","sourceDirName":"configuration","slug":"/configuration/transforms","permalink":"/multi-scrobbler/docs/configuration/transforms","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration/transforms.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Scrobble Modification","toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"Kitchen Sink","permalink":"/multi-scrobbler/docs/configuration/kitchensink"},"next":{"title":"Development","permalink":"/multi-scrobbler/docs/category/development"}}'),r=s(85893),l=s(50065);let t={sidebar_position:4,title:"Scrobble Modification",toc_max_heading_level:4},o=void 0,a={},c=[{value:"Why?",id:"why",level:3},{value:"Overview",id:"overview",level:2},{value:"Journey of a Scrobble",id:"journey-of-a-scrobble",level:3},{value:"Lifecyle Hooks",id:"lifecyle-hooks",level:3},{value:"TLDR",id:"tldr",level:4},{value:"Hook",id:"hook",level:5},{value:"Modification Parts",id:"modification-parts",level:3},{value:"Expression",id:"expression",level:5},{value:"Compare Hook",id:"compare-hook",level:4},{value:"Regular Expressions",id:"regular-expressions",level:4},{value:"Conditional Modification",id:"conditional-modification",level:3},{value:"&quot;When&quot; Condition",id:"when-condition",level:4},{value:"Top-level Hook array",id:"top-level-hook-array",level:4},{value:"Logging",id:"logging",level:3},{value:"Examples",id:"examples",level:2},{value:"Remove phrase from Title in all new Plays",id:"remove-phrase-from-title-in-all-new-plays",level:3},{value:"Remove all parenthesized content from the end of a title",id:"remove-all-parenthesized-content-from-the-end-of-a-title",level:3},{value:"Rename misspelled artist in all new Plays",id:"rename-misspelled-artist-in-all-new-plays",level:3},{value:"Remove &quot;Various Artists&quot; albums in all new Plays",id:"remove-various-artists-albums-in-all-new-plays",level:3},{value:"Extract primary Artist from delimited, multi-Artist string",id:"extract-primary-artist-from-delimited-multi-artist-string",level:3}];function d(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Multi-scrobbler configs support the ability to modify scrobble data in an automated fashion by matching and replacing strings in ",(0,r.jsx)(n.strong,{children:"title, artists, and album"})," at many different times in multi-scrobbler's lifecycle."]}),"\n",(0,r.jsx)(n.h3,{id:"why",children:"Why?"}),"\n",(0,r.jsx)(n.p,{children:'You may need to "clean up" data from a Source or before sending to a scrobble Client due to any number of reasons:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["ID3 tags in your music collection are dirty or have repeating garbage IE ",(0,r.jsx)(n.code,{children:"[YourMusicSource.com] My Artist - My Title"})]}),"\n",(0,r.jsxs)(n.li,{children:["A Source's service often incorrectly adds data to some field IE ",(0,r.jsx)(n.code,{children:"My Artist - My Title (Album Version)"})," when the title should just be ",(0,r.jsx)(n.code,{children:"My Title"})]}),"\n",(0,r.jsx)(n.li,{children:"An Artist you listen to often is spelled different between a Source and a Client which causes duplicate scrobbles"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In any scenario where a repeating pattern can be found in the data it would be nice to be able to fix it before the data gets downstream or to help prevent duplicate scrobbling. Multi-scrobbler can help you do this."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.h3,{id:"journey-of-a-scrobble",children:"Journey of a Scrobble"}),"\n",(0,r.jsx)(n.p,{children:"First, let's recap the lifecycle of a scrobble in multi-scrobbler:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Sources"})," are the beginning of the journey for a ",(0,r.jsx)(n.strong,{children:"Play"})," (song you've listened to long enough to be scrobblable)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A Source finds a new valid ",(0,r.jsx)(n.strong,{children:"Play"})]}),"\n",(0,r.jsxs)(n.li,{children:["The Source ",(0,r.jsx)(n.strong,{children:"compares"})," this new Play to all the other Plays it has already seen, if the Play is unique (title/artist/album/listened datetime) then..."]}),"\n",(0,r.jsxs)(n.li,{children:["The Source ",(0,r.jsx)(n.strong,{children:"discovers"})," the Play, adds it to Plays it has seen already, and broadcasts the Play should be scrobbled to all Clients"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Scrobble ",(0,r.jsx)(n.strong,{children:"Clients"})," listen for discovered Plays from Sources, then..."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A Client receives a ",(0,r.jsx)(n.strong,{children:"Play"})," from a Source"]}),"\n",(0,r.jsxs)(n.li,{children:["The Client ",(0,r.jsx)(n.strong,{children:"compares"})," this Play to all the other scrobbles it has already seen, if the Play is unique (title/artist/album/listened datetime) then..."]}),"\n",(0,r.jsxs)(n.li,{children:["The Client ",(0,r.jsx)(n.strong,{children:"scrobbles"})," the Play downstream to the scrobble service and adds it as a Scrobble it has seen already"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"lifecyle-hooks",children:"Lifecyle Hooks"}),"\n",(0,r.jsx)(n.p,{children:"You'll notice there is a pattern above that looks like this:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Before"})," data is compared"]}),"\n",(0,r.jsxs)(n.li,{children:["Data is ",(0,r.jsx)(n.strong,{children:"compared"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"After"})," data is compared"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These points, during both Source and Client processes, are when you can hook into the scrobble lifecycle and modify it."}),"\n",(0,r.jsx)(n.h4,{id:"tldr",children:"TLDR"}),"\n",(0,r.jsxs)(n.p,{children:["In more concrete terms this is the structure of hooks within a configuration (can be used in any ",(0,r.jsx)(n.strong,{children:"Source"})," or ",(0,r.jsx)(n.strong,{children:"Client"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",metastring:'title="lastfm.json" {10-14}',children:'[\n  {\n    "name": "myLastFm",\n    "enable": true,\n    "configureAs": "source",\n    "data": {\n      // ...\n    },\n    "options": {\n      "playTransform": {\n        "preCompare": {/* ... */},\n        "compare": {/* ... */},\n        "postCompare": {/* ... */}\n      }\n    }\n  }\n]\n'})}),"\n",(0,r.jsx)(n.h5,{id:"hook",children:"Hook"}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.strong,{children:"Sources"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"preCompare"})," - modify Play data immediately when received"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compare"})," - temporarily modify Play data when it is being compared to see if Play was already discovered"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"postCompare"})," - modify Play data before sending to scrobble ",(0,r.jsx)(n.strong,{children:"Clients"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.strong,{children:"Clients"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"preCompare"})," - modify Play data immediately when received"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compare"})," - temporarily modify Play data when it is being compared to see if it was already scrobbled"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"postCompare"})," - modify Play data before scrobbling it to downstream service and adding to already seen scrobbles"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.p,{children:"Keep in mind that modifying Scrobble/Play data earlier in the lifecycle will affect that data at all times later in the lifecycle."}),(0,r.jsxs)(n.p,{children:["For example, to modify the track so it's the same anywhere it is processed in multi-scrobbler you only need to modify it in the ",(0,r.jsx)(n.strong,{children:"Source's"})," ",(0,r.jsx)(n.code,{children:"preCompare"})," hook because all later processes will receive the data with the modified track."]})]}),"\n",(0,r.jsx)(n.h3,{id:"modification-parts",children:"Modification Parts"}),"\n",(0,r.jsxs)(n.p,{children:["Each ",(0,r.jsx)(n.a,{href:"#hook",children:(0,r.jsx)(n.strong,{children:"hook"})})," (",(0,r.jsx)(n.code,{children:"preCompare"})," etc...) is an object that specifies what part of the ",(0,r.jsx)(n.strong,{children:"Play"})," to modify:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",children:'{\n    "title": [/* ... */],\n    "artists": [/* ... */],\n    "album": [/* ... */]\n}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"expression",children:"Expression"}),"\n",(0,r.jsxs)(n.p,{children:["and then a ",(0,r.jsx)(n.strong,{children:"list"})," what pattern/replacements (expressions) to use for the modification by using either simple strings or ",(0,r.jsx)(n.code,{children:"search-replace"})," objects:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",children:'[\n  "badTerm", // remove all instances of \'badTerm\'\n  {\n    "search": "anotherBadTerm", // and also match all instances of \'anotherBadTerm\'\n    "replace": "goodTerm" // replace with the string \'goodTerm\'\n  }\n]\n'})}),"\n",(0,r.jsx)(n.p,{children:"Putting it all together:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",metastring:'title="lastfm.json"',children:'[\n  {\n    "name": "myLastFm",\n    "enable": true,\n    "configureAs": "source",\n    "data": {\n      // ...\n    },\n    "options": {\n      "playTransform": {\n        "preCompare": {\n          "title": [\n            "badTerm",\n            {\n              "search": "badTerm",\n              "replace": "goodTerm"\n            }\n          ]\n        },\n      }\n    }\n  }\n]\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If the value of the field (title, an artist, album) is an empty string after transforming then the field is ",(0,r.jsx)(n.strong,{children:"removed."})]})}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["Modifications can also be applied to ",(0,r.jsx)(n.strong,{children:"all Sources"})," or ",(0,r.jsx)(n.strong,{children:"all Clients"})," when using the ",(0,r.jsx)(n.a,{href:"/multi-scrobbler/docs/configuration/?configType=aio#configuration-types",children:"AIO Config"})," ",(0,r.jsx)(n.code,{children:"config.json"})," by setting ",(0,r.jsx)(n.code,{children:"playTransform"})," in ",(0,r.jsx)(n.code,{children:"sourceDefaults"})," or ",(0,r.jsx)(n.code,{children:"clientDefaults"}),":"]}),(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Example"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",metastring:'title="config.json"',children:'{\n  "sourceDefaults": { // will apply playTransform to all sources\n    "playTransform": {\n      "preCompare": {\n        "title": [\n          "(Album Version)"\n        ]\n      }\n    }\n  },\n  "sources": [/* ... */],\n  "clients": [/* ... */]\n}\n'})})]})]}),"\n",(0,r.jsx)(n.h4,{id:"compare-hook",children:"Compare Hook"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"compare"})," ",(0,r.jsx)(n.a,{href:"#hook",children:"hook"})," is slightly different than ",(0,r.jsx)(n.code,{children:"preCompare"})," and ",(0,r.jsx)(n.code,{children:"postCompare"}),". It consists of an object where you define which side(s) of the comparison should be modified. It also ",(0,r.jsx)(n.strong,{children:"does not modify downstream data!"})," Instead, the modifications are made only for use in the comparison."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",metastring:'title="lastfm.json"',children:'[\n  {\n    "name": "myLastFm",\n    // ...\n    "options": {\n      "playTransform": {\n        "compare": {\n          "candidate": {/* ... */}, // modify the "new" Play being compared\n          "existing": {/* ... */}, // modify all "existing" Play/Scrobbles the new Play is being compared against\n        },\n      }\n    }\n  }\n]\n'})}),"\n",(0,r.jsx)(n.h4,{id:"regular-expressions",children:"Regular Expressions"}),"\n",(0,r.jsxs)(n.p,{children:["In addition to plain strings ",(0,r.jsx)(n.a,{href:"#expression",children:"expressions"})," that are matched and removed you can also use Regular Expressions. Write your regex like you normally would, but as a string, and it'll automatically be parsed:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",children:'[\n  "/^\\(\\w+.com)/i", // matches any string that starts with \'(YourMusic.com)\' and removes it\n  {\n    "search": "/^\\(\\w+.com)/i", // matches any string that starts with \'(YourMusic.com)\'\n    "replace": "[MySite.com]" // replace with the string \'[MySite.com]\'\n  }\n]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"replace"})," property uses javascript's ",(0,r.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_the_replacement",children:[(0,r.jsx)(n.code,{children:"replace()"})," function and so can use any special string characters."]})]}),"\n",(0,r.jsx)(n.h3,{id:"conditional-modification",children:"Conditional Modification"}),"\n",(0,r.jsx)(n.h4,{id:"when-condition",children:'"When" Condition'}),"\n",(0,r.jsxs)(n.p,{children:["Top-level hooks ",(0,r.jsx)(n.strong,{children:"and"})," individual rules also support a ",(0,r.jsx)(n.code,{children:"when"})," key for testing ",(0,r.jsx)(n.strong,{children:"if they should be run."})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"when"})," key is similar to a normal ",(0,r.jsx)(n.a,{href:"#modification-parts",children:"modification"})," except:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"the keys accept a single string instead of an array"}),"\n",(0,r.jsxs)(n.li,{children:["the ",(0,r.jsx)(n.code,{children:"when"})," key data is an array instead of a single object"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["All parts of an individual ",(0,r.jsx)(n.code,{children:"when"}),' clause must test true to "pass" but if ',(0,r.jsx)(n.strong,{children:"any"})," ",(0,r.jsx)(n.code,{children:"when"})," clauses pass the hook/rule is processed. Example ",(0,r.jsx)(n.code,{children:"when"})," data:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",children:'{\n  "when": [\n    {\n      "artist": "Elephant Gym", // both of these must match the Play object (AND)\n      "album": "Dreams" // both of these must match the Play object (AND)\n    },\n    // OR\n    {\n      "title": "/(Remastered)$/", // both of these must match the Play object (AND)\n      "album": "Various Artists" // both of these must match the Play object (AND)\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"More succinctly:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["All parts (",(0,r.jsx)(n.code,{children:"artist"})," ",(0,r.jsx)(n.code,{children:"album"})," ",(0,r.jsx)(n.code,{children:"title"}),") of a ",(0,r.jsx)(n.code,{children:"when"})," are ",(0,r.jsx)(n.code,{children:"AND"})," conditions"]}),"\n",(0,r.jsxs)(n.li,{children:["All part-objects in the ",(0,r.jsx)(n.code,{children:"when"})," array are ",(0,r.jsx)(n.code,{children:"OR"})," conditions"]}),"\n"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Example of top-level hook with when condition"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",children:'{\n  // IF the artist is Elephant Gym \n  // THEN Run preCompare hook ELSE skip this hook\n  //\n  //    Run search-replace on album\n  //    Run regex title remove\n  "sourceDefaults": {\n    "playTransform": {\n      "preCompare": {\n        "when": [\n          {\n            "artist": "/Elephant Gym/"\n          }\n        ],\n        "album": [\n          {\n            "search": "Dreams",\n            "replace": "\u5922\u5883"\n          }\n        ],\n        "title": ["/\\s\\-\\s\u6EFE\u77F340\\s\u6EFE\u77F3\u649E\u6A02\u968A\\s40\u5718\u62DA\u7D93\u5178(.+)$/i"]\n      },\n    }\n  }\n}\n'})})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Example of individual rule with when condition"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",children:'{\n  // Always run preCompare\n  //\n  //   On search-replace in title...\n  //     IF artist matches "Elephant Gym"\n  //     THEN Run regex search-replace ELSE skip this rule\n  //\n  //   Run live|remastered regex remove\n  "sourceDefaults": {\n    "playTransform": {\n      "preCompare": {\n        "title": [\n          {\n            "search": "/\\\\s\\\\-\\\\s\u6EFE\u77F340\\\\s\u6EFE\u77F3\u649E\u6A02\u968A\\\\s40\u5718\u62DA\u7D93\u5178(.+)$/i",\n            "replace": "",\n            "when": [\n              {\n                "artist": "/Elephant Gym/"\n              }\n            ]\n          },\n          "/(\\\\s\\\\-\\\\s|\\\\s)(feat\\\\.(.+)|live|remastered(.+))$/i"\n        ],\n      }\n    }\n  }\n}\n'})})]}),"\n",(0,r.jsx)(n.h4,{id:"top-level-hook-array",children:"Top-level Hook array"}),"\n",(0,r.jsxs)(n.p,{children:["Top-level hooks can also be an array of hooks. This makes creating multiple scenarios for top-level ",(0,r.jsx)(n.code,{children:"when"}),"-gated hooks easier. All hooks in the array will be run (assuming their ",(0,r.jsx)(n.code,{children:"when"}),"'s pass, if they exist) and their ",(0,r.jsx)(n.strong,{children:"input will be the Play object output of the previous hook in the array."})]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Example"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",children:'{\n  "sourceDefaults": {\n    "playTransform": {\n      "preCompare": [\n        // first lifecycle hook of preCompare to run\n        {\n          "title": [\n            {\n              "search": "something",\n              "replace": "else unique"\n            }\n          ]\n        },\n        // second lifecycle hook of preCompare to run\n        {\n          "title": [\n            {\n              "search": "else unique",\n              "replace": "very demure"\n            }\n          ]\n        },\n      ]\n    }\n  }\n}\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,r.jsxs)(n.p,{children:["MS can log the output of hook transformations if/when they occur. In the ",(0,r.jsx)(n.code,{children:"playTransform"})," object of a Source/Client config use ",(0,r.jsx)(n.code,{children:"log"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"log": true'})," => Output original play + final transformed output of last hook in the array"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"log": "all"'})," => Output original play + final transformed output of ",(0,r.jsx)(n.strong,{children:"each"})," hook in the array"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",children:'{\n  "name": "myThing",\n  "data": {/*...*/},\n  "options": {\n    "playTransform": {\n      "preCompare": {/*...*/},\n      "log": true\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"remove-phrase-from-title-in-all-new-plays",children:"Remove phrase from Title in all new Plays"}),"\n",(0,r.jsxs)(n.p,{children:["Removes the phrase ",(0,r.jsx)(n.code,{children:"(Album Version)"})," from the Title of a Play"]}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Example"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",metastring:'title="config.json"',children:'{\n  "sourceDefaults": {\n    "playTransform": {\n      "preCompare": {\n        "title": [\n          "(Album Version)"\n        ]\n      }\n    }\n  }\n}\n\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"remove-all-parenthesized-content-from-the-end-of-a-title",children:"Remove all parenthesized content from the end of a title"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Example"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",metastring:'title="lastfm.json"',children:'[\n  {\n    "name": "myLastFm",\n    // ...\n    "options": {\n      "playTransform": {\n        "compare": {\n          "candidate": {\n          "title": [\n              "/(\\(.+\\))\\s*$/"\n            ]\n          },\n          "existing": {\n          "title": [\n              "/(\\(.+\\))\\s*$/"\n            ]\n          },\n        },\n      }\n    }\n  }\n]\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"rename-misspelled-artist-in-all-new-plays",children:"Rename misspelled artist in all new Plays"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Example"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",metastring:'title="config.json"',children:'{\n  "sourceDefaults": {\n    "playTransform": {\n      "preCompare": {\n        "artists": [\n          {\n            "search": "Boz Skaggs",\n            "replace": "Boz Scaggs"\n          }\n        ]\n      }\n    }\n  }\n}\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"remove-various-artists-albums-in-all-new-plays",children:'Remove "Various Artists" albums in all new Plays'}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Example"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",metastring:'title="config.json"',children:'{\n  "sourceDefaults": {\n    "playTransform": {\n      "preCompare": {\n        "album": [\n          {\n            "search": "Various Artists",\n            "replace": ""\n          }\n        ]\n      }\n    }\n  }\n}\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"extract-primary-artist-from-delimited-multi-artist-string",children:"Extract primary Artist from delimited, multi-Artist string"}),"\n",(0,r.jsxs)(s,{children:[(0,r.jsx)(n.p,{children:"When the Artist string is actually a multi-artist, delimited string, this search-and-replace will replace the string with just the first artist found."}),(0,r.jsx)(n.p,{children:"Ex"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"My Artist One / My Artist Two / Another Guy\nMy Artist One\n"})}),(0,r.jsxs)(n.p,{children:["Artists are delimited with a spaced forward slash (",(0,r.jsx)(n.code,{children:"/"}),") in the regex below. Replace the contents of the ",(0,r.jsx)(n.code,{children:"delim"})," capture group with the delimiter for your use case. Some more common scenarios:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"(?<delim>\\\\/)"})," No spaces between slash IE ",(0,r.jsx)(n.code,{children:"My Artist One/My Artist Two/Another Guy"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"(?<delim>\\\\s*\\\\\\\\\\s*)"})," Backslash instead of forward slash IE ",(0,r.jsx)(n.code,{children:"My Artist One \\ My Artist Two \\ Another Guy"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"(?<delim>,)"})," Comma IE ",(0,r.jsx)(n.code,{children:"My Artist One, My Artist Two, Another Guy"})]}),"\n"]}),(0,r.jsxs)(s,{children:[(0,r.jsx)("summary",{children:"Example"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json5",metastring:'title="config.json"',children:'{\n  "sourceDefaults": {\n    "playTransform": {\n      "preCompare": {\n        "artists": [\n          {\n            "search": "(.*?)(?<delim>\\\\s*\\\\/\\\\s*)(.*$)",\n            "replace": "$1"\n          }\n        ]\n      }\n    }\n  }\n}\n'})})]})]})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},50065:function(e,n,s){s.d(n,{Z:()=>o,a:()=>t});var i=s(67294);let r={},l=i.createContext(r);function t(e){let n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);
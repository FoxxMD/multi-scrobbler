"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["2583"],{25894:function(e,s,t){t.r(s),t.d(s,{frontMatter:()=>l,default:()=>m,toc:()=>u,metadata:()=>n,assets:()=>d,contentTitle:()=>a});var n=JSON.parse('{"id":"configuration/sources/mpris","title":"MPRIS","description":"MPRIS is a standard interface for communicating with Music Players on linux operating systems.","source":"@site/docs/configuration/sources/mpris.mdx","sourceDirName":"configuration/sources","slug":"/configuration/sources/mpris","permalink":"/multi-scrobbler/configuration/sources/mpris","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration/sources/mpris.mdx","tags":[],"version":"current","frontMatter":{"title":"MPRIS","toc_min_heading_level":2,"toc_max_heading_level":5},"sidebar":"tutorialSidebar","previous":{"title":"MPD (Music Player Daemon)","permalink":"/multi-scrobbler/configuration/sources/mpd"},"next":{"title":"Musikcube","permalink":"/multi-scrobbler/configuration/sources/musikcube"}}'),i=t(85893),r=t(50065),o=t(703),c=t(73752);t(75752);let l={title:"MPRIS",toc_min_heading_level:2,toc_max_heading_level:5},a=void 0,d={},u=[{value:"Host Setup",id:"host-setup",level:5},{value:"Local Unix Socket",id:"local-unix-socket",level:5},{value:"Remote Unix Socket",id:"remote-unix-socket",level:5},{value:"Configuration",id:"configuration",level:2}];function h(e){let s={a:"a",admonition:"admonition",code:"code",h2:"h2",h5:"h5",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components},{Config:n}=s;return n||function(e,s){throw Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Config",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://specifications.freedesktop.org/mpris-spec/latest",children:"MPRIS"})," is a standard interface for communicating with Music Players on ",(0,i.jsx)(s.strong,{children:"linux operating systems."})]}),"\n",(0,i.jsx)(s.p,{children:"If you run Linux and have a notification tray that shows what media you are listening to, you likely have access to MPRIS."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Notification Tray",src:t(51859).Z+"",width:"542",height:"592"})}),"\n",(0,i.jsxs)(s.p,{children:["multi-scrobbler can listen to this interface and scrobble tracks played by ",(0,i.jsx)(s.strong,{children:"any media player"})," that communicates to the operating system with MPRIS."]}),"\n",(0,i.jsx)(s.h5,{id:"host-setup",children:"Host Setup"}),"\n",(0,i.jsx)(s.p,{children:"MPRIS communication requires multi-scrobbler to have access to the host's dbus-daemon."}),"\n",(0,i.jsxs)(o.default,{groupId:"dbus",queryString:!0,children:[(0,i.jsxs)(c.default,{value:"local",label:"Local",children:[(0,i.jsxs)(s.p,{children:["If multi-scrobbler is running as a ",(0,i.jsx)(s.a,{href:"/multi-scrobbler/installation/#nodejs",children:(0,i.jsx)(s.strong,{children:"Local Installation"})}),", directly with node/npm, on the same host as MPRIS then no setup is required."]}),(0,i.jsxs)(s.p,{children:["Remote setup is also possible, see the ",(0,i.jsx)(s.strong,{children:"Remote Unix Socket"})," section in the Docker tab."]})]}),(0,i.jsxs)(c.default,{value:"docker",label:"Docker",children:[(0,i.jsxs)(s.p,{children:["If multi-scrobbler is running as a ",(0,i.jsx)(s.a,{href:"/multi-scrobbler/installation/#docker",children:(0,i.jsx)(s.strong,{children:"Docker Container"})})," some modifications are required..."]}),(0,i.jsx)(s.h5,{id:"local-unix-socket",children:"Local Unix Socket"}),(0,i.jsxs)(s.p,{children:["The most secure way is to ",(0,i.jsx)(s.strong,{children:"run a multi-scrobbler container on the same host as MPRIS."})," In this scenario you can simply mount the ",(0,i.jsx)(s.strong,{children:"user session"})," dbus unix socket into the container. Make sure ",(0,i.jsxs)(s.a,{href:"/installation/#linux-host",children:[(0,i.jsx)(s.code,{children:"PUID"})," and ",(0,i.jsx)(s.code,{children:"PGID"})," ENVs are configured"]})," so the container has permissions to access the socket. Then, modify your compose stack with these additional values:"]}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",metastring:'title="docker-compose.yaml"',children:"\n    environment:\n    - DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/UID/bus \n\n    volumes:\n    - /run/user/UID/bus:/run/user/UID/bus:ro\n"})}),(0,i.jsx)(s.h5,{id:"remote-unix-socket",children:"Remote Unix Socket"}),(0,i.jsx)(s.admonition,{type:"warning",children:(0,i.jsxs)(s.p,{children:["This method is ",(0,i.jsx)(s.strong,{children:"insecure."})," You should not expose dbus over a network unless access to the port is restricted and the network is trusted."]})}),(0,i.jsxs)(s.p,{children:["Use ",(0,i.jsx)(s.a,{href:"https://linux.die.net/man/1/socat",children:(0,i.jsx)(s.code,{children:"socat"})})," to bidirectionally relay communication from the host's dbus socket to a listening TCP port."]}),(0,i.jsxs)(s.p,{children:["To make dbus for user with uid ",(0,i.jsx)(s.code,{children:"1000"})," available on port ",(0,i.jsx)(s.code,{children:"6644"}),":"]}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-shell",children:"socat TCP-LISTEN:6644,reuseaddr,fork UNIX-CONNECT:/run/user/1000/bus\n"})}),(0,i.jsx)(s.p,{children:"Then, add the following value to multi-scrobbler's ENVs:"}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"DBUS_SESSION_BUS_ADDRESS=tcp:host=yourHostIP,port=6644\n"})})]})]}),"\n",(0,i.jsx)(s.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n,{config:"MPRISSourceConfig",fileContent:'[\n  {\n    "name": "ubuntu",\n    "enable": true,\n    "data": {\n      "whitelist": ["vlc", "mpd"],\n      "blacklist": ["spotify"]\n    }\n  }\n]\n',name:"mpris",children:(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Environmental Variable"}),(0,i.jsx)(s.th,{children:"Required?"}),(0,i.jsx)(s.th,{children:"Default"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"MPRIS_ENABLE"}),(0,i.jsx)(s.td,{children:"No"}),(0,i.jsx)(s.td,{}),(0,i.jsx)(s.td,{children:"Use MPRIS as a Source (useful when you don't need any other options)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"MPRIS_BLACKLIST"}),(0,i.jsx)(s.td,{children:"No"}),(0,i.jsx)(s.td,{}),(0,i.jsx)(s.td,{children:"Comma-delimited list of player names not to scrobble from"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"MPRIS_WHITELIST"}),(0,i.jsx)(s.td,{children:"No"}),(0,i.jsx)(s.td,{}),(0,i.jsx)(s.td,{children:"Comma-delimited list of players names to ONLY scrobble from. Overrides blacklist"})]})]})]})})]})}function m(e={}){let{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},51859:function(e,s,t){t.d(s,{Z:()=>n});let n=t.p+"assets/images/mpris-e95a64bfe1b46a618dc43729685d6114.jpg"}}]);